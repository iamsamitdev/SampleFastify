services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: fastify_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-fastify_app}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - fastify_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-fastify_app}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: fastify_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - fastify_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Fastify Application
  fastify_app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: fastify_app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-fastify_app}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      RATE_LIMIT_TIME_WINDOW: ${RATE_LIMIT_TIME_WINDOW:-15}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fastify_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: fastify_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - fastify_app
    networks:
      - fastify_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  fastify_network:
    driver: bridge
